// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

model User {
  id Int @id @default(autoincrement())
  name String
  role Role @default(user)
  email String @unique
  password String
  is_verified Boolean @default(false)
  verification_token String?
  verification_token_expires_at DateTime?
  reset_password_token String?
  reset_password_token_expires_at DateTime?
  profile_url String?
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt

  // relation
  movies_created Movie[] @relation("UserCreatedMovies")
  schedules_created Schedule[] @relation("UserCreatedSchedules")
  transactions Transaction[]
  notification_recipients NotificationRecipients[]
  user_notification_reads UserNotificationReads[]
  @@map("Users")
}

enum MovieStatus {
  coming_soon
  now_showing
  ended
}

model Movie {
  id Int @id @default(autoincrement())
  title String
  synopsis String
  director String
  duration String
  rating String
  language String
  subtitle String
  poster_url String
  trailer_url String
  release_date DateTime
  status MovieStatus
  created_by_id Int
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt

  // relation
  created_by User @relation("UserCreatedMovies", fields: [created_by_id], references: [id])
  casts Cast[]
  movie_genres MovieGenre[] 
  schedules Schedule[]
  @@map("Movies")
}

model Cast {
  id Int @id @default(autoincrement())
  actor_name String
  actor_url String
  movie_id Int
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt

  // relation
  movie Movie @relation(fields: [movie_id], references: [id], onDelete: Cascade)

  @@map("Casts")
}

model Genre {
  id Int @id @default(autoincrement())
  name String
  created_at DateTime @default(now())
  updated_at DateTime?  @updatedAt

  // relation
  movie_genres MovieGenre[]

  @@map("Genres")
}

model MovieGenre {
  id Int @id @default(autoincrement())
  movie_id Int
  genre_id Int
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt

  // relation
  movie Movie @relation(fields: [movie_id], references: [id], onDelete: Cascade)
  genre Genre @relation(fields: [genre_id], references: [id], onDelete:  Cascade)

  @@map("MovieGenres")
}


enum TARGET_AUDIENCE {
  all
  spesific
}

model Notification {
  id Int @id @default(autoincrement())
  title String
  description String
  target_audience TARGET_AUDIENCE
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt

  // relation
  notification_recipients NotificationRecipients[]
  user_notification_reads UserNotificationReads[]
  @@map("Notifications")
}

model NotificationRecipients {
  id Int @id @default(autoincrement())
  notification_id Int
  user_id Int
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt

  // relation
  notification Notification @relation(fields: [notification_id], references: [id], onDelete: Cascade)
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // OPTIMASI: agar user hanya bisa jadi penerima 1x per notifikasi
  @@unique([notification_id, user_id])

  // OPTIMASI: Percepat query berdasarkan user_id
  @@index([user_id])

  @@map("NotificationRecipients")
}

model UserNotificationReads {
  id Int @id @default(autoincrement())
  notification_id Int
  user_id Int
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt

// relation
  notification Notification @relation(fields: [notification_id], references: [id], onDelete: Cascade)
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // OPTIMASI: agar user hanya bisa membaca 1x per notifikasi
  @@unique([notification_id, user_id])

  // OPTIMASI: Percepat query berdasarkan user_id
  @@index([user_id])
  @@map("UserNotificationReads")
}

model Studio {
  id Int @id @default(autoincrement())
  name String
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt

  // relation
  galleries StudioGallery[]
  seats Seat[]
  schedules Schedule[]
  @@map("Studios")
}

model StudioGallery {
  id Int @id @default(autoincrement())
  photo_url String
  studio_id Int
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt

  // relation
  studio Studio @relation(fields: [studio_id], references: [id], onDelete: Cascade)
  @@map("StudioGalleries")
}

model Seat {
  id Int @id @default(autoincrement())
  seat_label String
  studio_id Int
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt 

  // relation
  studio Studio @relation(fields: [studio_id], references: [id], onDelete: Cascade)
  schedule_seats ScheduleSeat[]
  @@map("Seats") 
}

model Schedule {
  id Int @id @default(autoincrement())
  date DateTime
  start_time DateTime
  finished_time DateTime
  price Int
  created_by_id Int
  movie_id Int
  studio_id Int
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt  

  // relation
  created_by User @relation("UserCreatedSchedules", fields: [created_by_id], references: [id])
  movie Movie @relation(fields: [movie_id], references: [id], onDelete: Cascade)
  studio Studio @relation(fields: [studio_id], references: [id], onDelete: Cascade)
  schedule_seats ScheduleSeat[]
  @@map("Schedules")
}

enum SeatStatus {
  available
  booked
  reserved
}

model ScheduleSeat {
  id Int @id @default(autoincrement())
  status SeatStatus
  schedule_id Int
  seat_id Int
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt  

  // relation
  schedule Schedule @relation(fields: [schedule_id], references: [id], onDelete: Cascade)
  seat Seat @relation(fields: [seat_id], references: [id], onDelete: Cascade)
  transaction_item TransactionItem?

  @@map("ScheduleSeats")
}

enum VoucherType {
  percentage
  fixed
}

model Voucher {
  id Int @id @default(autoincrement())
  code String @unique
  type VoucherType
  value Int
  expires_at DateTime
  usage_limit Int
  usage_count Int @default(0)
  min_purchase_amount Int
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt

  // relation
  transactions Transaction[]
  @@map("Vouchers")  
}

enum BookingStatus {
  initiated
  pending
  cancelled
  settlement
}

model Transaction {
  id Int @id @default(autoincrement())
  total_amount Int
  discount_amount Int
  final_amount Int
  payment_type String
  payment_status String
  booking_status BookingStatus
  transaction_time DateTime
  booking_expires_at DateTime
  user_id Int
  voucher_id Int
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt   

  // relation 
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  voucher Voucher? @relation(fields: [voucher_id], references: [id])
  transaction_items TransactionItem[]

  @@map("Transactions")
}

model TransactionItem {
  id Int @id @default(autoincrement())
  transaction_id Int
  schedule_seat_id Int @unique
  price Int
  seat_label String
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt

  // relation
  transaction Transaction @relation(fields: [transaction_id], references: [id], onDelete: Cascade)
  schedule_seat ScheduleSeat @relation(fields: [schedule_seat_id], references: [id])
  ticket Ticket?

  @@map("TransactionItems")
}

enum TicketStatus {
  active
  used
  expired
  cancelled
}

model Ticket {
  id Int @id @default(autoincrement())
  code String @unique
  status TicketStatus
  transaction_item_id Int @unique
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt 

  // relation
  transaction_item TransactionItem @relation(fields: [transaction_item_id], references: [id], onDelete: Cascade)
  
  @@map("Tickets")
}